// 아두이노코드
#define TRIG_PIN 9
#define ECHO_PIN 10

void setup() {
  Serial.begin(9600);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
}

void loop() {
  long duration, distance;
  
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  
  duration = pulseIn(ECHO_PIN, HIGH);
  distance = (duration / 2) / 29.1;  // 센티미터로 변환
  
  Serial.println(distance);  // 시리얼로 거리값 전송
  
  delay(100);  // 측정 간격 조정
}


//프로세싱 코드
import processing.serial.*;

Serial myPort;
float distance;
PImage img;
float scaleFactor;
float smoothDistance;

void setup() {
  size(800, 600);  // 윈도우 크기 설정
  img = loadImage("coin.jpg");  // 사용하려는 이미지 경로
  myPort = new Serial(this, Serial.list()[0], 9600);  // 아두이노 시리얼 포트 연결
  scaleFactor = 1.0;  // 초기 확대/축소 비율
  smoothDistance = 0;  // 초기 거리값
  frameRate(60);  // 프레임 속도 설정
}

void draw() {
  if (myPort.available() > 0) {
    String inString = myPort.readStringUntil('\n');
    if (inString != null) {
      inString = trim(inString);
      float newDistance = float(inString);
      
      // distance 값이 100을 초과하면 100으로 고정
      if (newDistance > 30) {
        newDistance = 30;
      }

      if (newDistance > 0) {
        // 거리값을 점진적으로 변화시키기 위해 보간 처리
        smoothDistance = lerp(smoothDistance, newDistance, 0.1);
      }
    }
  }
  
  // 거리에 비례한 확대/축소 비율 계산
  scaleFactor = map(smoothDistance, 0, 30, 3.0, 1.0);  // 1.0은 화면 꽉 참, 2.0은 확대됨

  background(255);
  
  // 현재 화면에 꽉 차는 크기 계산
  float baseWidth = width;
  float baseHeight = height;

  // 거리에 비례해 이미지 확대
  float imgWidth = baseWidth * scaleFactor;
  float imgHeight = baseHeight * scaleFactor;
  
  // 확대된 이미지의 중심을 맞추기 위해 이미지 위치 조정
  float xPos = width / 2 - imgWidth / 2;
  float yPos = height / 2 - imgHeight / 2;
  
  // 이미지 그리기
  image(img, xPos, yPos, imgWidth, imgHeight);
}
